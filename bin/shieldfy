#!/bin/bash


getPHPINIFile ()
{

	BasePHPFolder=$(php --ini | grep -o "/.*/" | head -1)
	PHPINICLIPATH=$(php --ini | grep -o "/.*/php.ini")

	echo -e "\e[34m>>> Locating Base INI Folder $BasePHPFolder ... \e[0m"
	if [ -f "$BasePHPFolderfpm/php.ini" ];then
		echo -e "\e[34m>>> Locating php.ini ... PHP INI Path is $BasePHPFolderfpm/php.ini \e[0m"
		PHPINIPATH="$BasePHPFolder/fpm/php.ini"
		return;
	fi

	if [ -f "$BasePHPFolderapache2/php.ini" ];then
		echo -e "\e[34m>>> Locating php.ini ...  PHP INI Path is $BasePHPFolderapache2/php.ini \e[0m"
		PHPINIPATH="$BasePHPFolder/apache2/php.ini"
		return;
	fi

	if [ -f "$BasePHPFolderphp.ini" ]; then
		echo -e "\e[34m>>> Locating php.ini ...  PHP INI Path is $BasePHPFolderphp.ini \e[0m"
		PHPINIPATH="$BasePHPFolder/php.ini"
		return;
	fi
	echo -e "\e[31m>>> Locating php.ini ...  Failed \e[0m"
}


InstallDependecies ()
{
	PHPBaseDevPackage='php-dev'
	PHPAlternativeDevPackage="php$PHP_VERSION_MAJOR.$PHP_VERSION_MINOR-dev"

	echo -e "\e[34m>>> Updating ... \e[0m"
	sudo apt-get update > /dev/null 2>&1
	#echo ">>> Installing Base"
	#sudo apt-get install -y $PHPBaseDevPackage
	echo -e "\e[34m>>> Installing phpdev $PHPAlternativeDevPackage ... \e[0m"
	sudo apt-get install -y $PHPAlternativeDevPackage > /dev/null 2>&1
	echo -e "\e[34m>>> Installing phppear ... \e[0m"
	sudo apt-get install -y php-pear > /dev/null 2>&1
}

InstallUOPZ ()
{
	UOPZ_IS_INSTALLED=$(php -r "echo (extension_loaded('uopz'))?1:0;")

	if [ $UOPZ_IS_INSTALLED -eq 3 ]; then
		echo -e "\e[34m>>> Check UOPZ installation ... OK\e[0m"
		return;
	else
		echo -e "\e[34m>>> Check UOPZ installation ... Not Installed\e[0m"
		echo -e "\e[34m>>> Installing UOPZ extention ...\e[0m"

		InstallDependecies

		if [ $PHP_VERSION_MAJOR -eq 7 ]; then
			InstallUOPZForPHP7
		else
			InstallUOPZForPHP5
		fi

		echo "extension = uopz.so" | sudo tee --append  $PHPINIPATH
		echo "extension = uopz.so" | sudo tee --append  $PHPINICLIPATH
		
	fi

	RestartService
}

InstallUOPZForPHP7 ()
{
	echo -e "\e[34m>>> Install UOPZ for PHP7\e[0m"
	sudo pecl install uopz > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo -e "\e[34m>>> Automatic Install failed , Installing Manually \e[0m"
	    #failed try compile it from source
	    wget http://pecl.php.net/get/uopz-5.0.2.tgz
		tar -xvf uopz-5.0.2.tgz
		cd uopz-5.0.2
		phpize
		./configure
		make
		#make test
		sudo make install
		cd ..
		rm uopz-5.0.2.tgz
		rm package.xml
		rm -r uopz-5.0.2
	fi
}

InstallUOPZForPHP5 ()
{
	echo -e "\e[34m>>> Install UOPZ for PHP5\e[0m"
	sudo pecl install uopz-2.0.7 > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo -e "\e[34m>>> Automatic Install failed , Installing Manually \e[0m"
	    #failed try compile it from source
	    wget http://pecl.php.net/get/uopz-2.0.7.tgz
		tar -xvf uopz-2.0.7.tgz
		cd uopz-2.0.7
		phpize
		./configure
		make
		#make test
		sudo make install
		cd ..
		rm uopz-2.0.7.tgz
		rm package.xml
		rm -r uopz-2.0.7
	fi
}


RestartService ()
{
	PHPFPM_SERVICE=$(service --status-all | grep -o 'php.*')

	nginx -v > /dev/null 2>&1
	NGINX_IS_INSTALLED=$?

	apache2 -v > /dev/null 2>&1
	APACHE_IS_INSTALLED=$?

	if [ $PHPFPM_SERVICE ]; then
		echo -e "\e[34m>>> Restaring PHP fpm\e[0m"
		sudo service $PHPFPM_SERVICE restart
	else
		echo -e "\e[34m>>>  PHP fpm not exists restarting the webserver instead\e[0m"
		if [ $NGINX_IS_INSTALLED == 0 ]; then
			echo -e "\e[34m>>> Restaring Nginx\e[0m"
			sudo service nginx restart
		fi
		if [ $APACHE_IS_INSTALLED == 0 ]; then
			echo -e "\e[34m>>> Restaring Apache\e[0m"
			sudo service apache2 restart
		fi
		
	fi
}

AddShieldfy ()
{
	
	echo -e "\e[34m>>> Exporting shieldfy configurations (shieldfy.json)\e[0m"
	# add shieldfy.json with keys in it
	cat > shieldfy.json << EOF
{
    "endpoint"          :"https://endpoint.shieldfy.io",
    "app_key"           :"$key",
    "app_secret"        :"$secret",
    "debug"             : false, 
    "action"            : "block", 
    "cache"             : "default",
    "headers"           : { 
        "X-XSS-Protection"       :  "1; mode=block",
        "X-Content-Type-Options" :  "nosniff",
        "X-Frame-Options"        :  "SAMEORIGIN"
    },
    "disable"           :  []
}

EOF
	
	#echo -e "\e[34m>>> Shieldfy installation \e[0m \e[5mdone\e[0m :dance: :dance: :dance:"
	echo -e "\e[40;38;5;82m---------------------------------------\e[0m"
	echo -e "\e[40;38;5;82m>>> Shieldfy installation  \u2705 done \e[0m"
	echo -e "\e[40;38;5;82m---------------------------------------\e[0m"

}

Main ()
{

	# Required Constants & Checks

	echo -e "\e[34m>>> Checking PHP Version\e[0m"

	PHP_VERSION_MAJOR=$(php -r "echo explode('.', PHP_VERSION)[0];")
	PHP_VERSION_MINOR=$(php -r "echo explode('.', PHP_VERSION)[1];")
	PHP_VERSION_RELEASE=$(php -r "echo explode('.', PHP_VERSION)[2];")

	echo -e "\e[34m>>> PHP $PHP_VERSION_MAJOR.$PHP_VERSION_MINOR.$PHP_VERSION_RELEASE ... OK\e[0m"

	getPHPINIFile

	# Install UOPZ
	InstallUOPZ

	#add Shieldfy
	AddShieldfy
}



# echo -e "\e[34m"
# cat <<EOF


#    _____ _     _      _     _  __       
#   / ____| |   (_)    | |   | |/ _|      
#  | (___ | |__  _  ___| | __| | |_ _   _ 
#   \___ \| '_ \| |/ _ \ |/ _  |  _| | | |
#   ____) | | | | |  __/ | (_| | | | |_| |
#  |_____/|_| |_|_|\___|_|\__,_|_|  \__, |
#                                    __/ |
#                                   |___/ 

# EOF

# echo -e "\e[0m"

echo -e "\e[40;38;5;82m----------------------------------------\e[0m"
echo -e "\e[40;38;5;82m>>> Shieldfy installation  \u2705 Start \e[0m"
echo -e "\e[40;38;5;82m----------------------------------------\e[0m"

echo -e "\e[34m>>> Welcome to Shieldfy Installer\e[0m"
echo -e "\e[34m>>> The installer require sudo password for some operations\e[0m"

#echo -e "\e[34m"
sudo echo -e "\e[34m>>> Begin Install\e[0m"
#echo -e "\e[0m"

# get shieldfy key & secret
key=$(php -r "echo @explode(':','$1')[0];")
secret=$(php -r "echo @explode(':','$1')[1];")
[[ ! $key || ! $secret ]] && { echo -e "\e[41m\e[97m\tMissing Key & Secret\t\t\e[0m"; exit 0; }

#run Main
Main
